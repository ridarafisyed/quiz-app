[{"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\App.tsx":"1","D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\index.tsx":"2","D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\Questions.tsx":"3","D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\StartGame.tsx":"4","D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\api\\API.ts":"5","D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\utils\\utils.ts":"6"},{"size":3079,"mtime":1609769710506,"results":"7","hashOfConfig":"8"},{"size":402,"mtime":1609764184225,"results":"9","hashOfConfig":"8"},{"size":4127,"mtime":1609837021832,"results":"10","hashOfConfig":"8"},{"size":6102,"mtime":1609828460722,"results":"11","hashOfConfig":"8"},{"size":1432,"mtime":1609500119803,"results":"12","hashOfConfig":"8"},{"size":88,"mtime":1608801774191,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"52jjd8",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\App.tsx",[],["30","31"],"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\index.tsx",[],["32","33"],"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\Questions.tsx",["34","35"],"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\StartGame.tsx",["36"],"import React, { useState } from 'react'\r\nimport Questions from './Questions'\r\n// import Score from './Score'\r\nimport {fetchQuestions,  QuestionState,  Difficulty} from './api/API'\r\n\r\n//Material ui components \r\nimport {makeStyles,} from '@material-ui/core/styles';\r\nimport {Paper, Button,  Container, Typography, CircularProgress } from \"@material-ui/core/\";\r\n\r\nconst useStyles = makeStyles({\r\n  button:{\r\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    color: 'white',\r\n    display:\"flex\",\r\n    margin:\"auto\",\r\n    alignItems:\"center\",\r\n    \r\n  },\r\n  button_next:{\r\n      background: 'linear-gradient(45deg,#504BF2 30%, #40B38B 90%)',\r\n      boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n      color: 'white',\r\n      display:\"flex\",\r\n      margin:20,\r\n      alignItems:\"center\",\r\n      float:\"right\",\r\n      \r\n  },\r\n  loading:{\r\n      display:\"flex\",\r\n      margin:\"auto\",\r\n      alignItems:\"center\",\r\n      alignContent:\"center\",\r\n\r\n  },\r\n  container:{\r\n      height:150,\r\n  },\r\n  card:{\r\n      margin:\"auto\",\r\n      alignItems:\"center\",\r\n      paddingTop:20,\r\n      paddingBottom:10,\r\n      height:200,\r\n}\r\n})\r\n\r\nexport type AnswerObject = {\r\n    question:string,\r\n    answer:string,\r\n    correct:boolean,\r\n    correctAnswer:string;\r\n}\r\n\r\ninterface Props{\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nconst TOTAL_QUESTIONS = 2;\r\n\r\nconst StartGame:React.FC<Props> =({id, name}) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n    const [number, setNumber] = useState(0);\r\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n    const [score, setScore] = useState(0);\r\n    const [gameOver, setGameOver] = useState(true);\r\n    const [level, setLevel] = useState(0);\r\n    \r\n    const startQuiz = async () =>{\r\n        // function trigger when start the quiz \r\n        // here we call the api data \r\n        setLoading(true);\r\n        setGameOver(false);  \r\n\r\n        const difficulty = () =>{\r\n            if (level === 0) return Difficulty.EASY;\r\n            else if (level === 1) return Difficulty.MEDIUM;\r\n            else return Difficulty.HARD\r\n        }  \r\n        \r\n        const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty(),id);\r\n        setQuestions(newQuestions);\r\n        setScore(0)\r\n        setNumber(0)\r\n        setUserAnswers([])\r\n        setLoading(false);\r\n    }\r\n\r\n    const nextLevel = async() => {\r\n        setLoading(true);\r\n        setGameOver(false); \r\n        setLevel(level + 1) \r\n\r\n        const difficulty = () =>{\r\n            if (level === 0) return Difficulty.EASY;\r\n            else if (level === 1) return Difficulty.MEDIUM;\r\n            else return Difficulty.HARD\r\n        }  \r\n        \r\n\r\n        const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, difficulty(),id);\r\n        setQuestions(newQuestions);\r\n        setScore(0)\r\n        setNumber(0)\r\n        setUserAnswers([])\r\n        setLoading(false);\r\n    }\r\n\r\n    // function when user select the answer\r\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) =>{\r\n        if(!gameOver){\r\n            const answer = e.currentTarget.value;\r\n\r\n            const correct = questions[number].correct_answer === answer;\r\n            if(correct) setScore(prev => prev + 1);\r\n\r\n            const answerObject = {\r\n                question: questions[number].question,\r\n                answer,\r\n                correct,\r\n                correctAnswer: questions[number].correct_answer\r\n            };\r\n            setUserAnswers(prev => [...prev, answerObject]);\r\n        }\r\n    }\r\n\r\n    // funtion for the next question.\r\n    const nextQuestion = () =>{\r\n        const nextQuestion = number + 1;\r\n        if (nextQuestion === TOTAL_QUESTIONS ){\r\n            setLevel(level + 1)\r\n            setGameOver(true);\r\n        }\r\n        else{\r\n            setNumber(nextQuestion);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            {/* starting game  */}\r\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n                <Paper elevation={3} className={classes.card}>\r\n                    <Typography variant=\"h5\" component=\"h3\" align=\"center\">\r\n                        {name}\r\n                     </Typography>\r\n                    <Typography align=\"center\">Lets Start Quiz</Typography>\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={startQuiz}>\r\n                        Start\r\n                    </Button>                    \r\n                    <Typography align=\"center\">Want some other category... </Typography>\r\n                    <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={()=> window.location.reload(false)}>\r\n                        Categories\r\n                    </Button>\r\n                </Paper>\r\n                ) : null}\r\n            {/* loading game  */}\r\n            {loading ? \r\n                <div className={classes.loading}>\r\n                    <CircularProgress  /> \r\n                </div>\r\n            \r\n            : null}\r\n\r\n            {/* question card */}\r\n            {!loading && !gameOver && userAnswers.length !== TOTAL_QUESTIONS ? (\r\n            <Questions\r\n                questionNo={number + 1}\r\n                totalQuestions={TOTAL_QUESTIONS}\r\n                question={questions[number].question}\r\n                answers={questions[number].answers}\r\n                userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n                callback={checkAnswer}\r\n                score={score}\r\n                level= {level}\r\n                subject = {name}\r\n            />\r\n            ): null}\r\n            {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\r\n          <Button className={classes.button_next} onClick={nextQuestion}>\r\n            Next Question\r\n          </Button>\r\n        ) : null}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default StartGame;\r\n",["37","38"],"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\api\\API.ts",[],"D:\\Bootcamp\\webistes\\typescript\\projects\\quiz-app\\src\\components\\utils\\utils.ts",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":6,"column":9,"nodeType":"47","messageId":"48","endLine":6,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":57,"column":13,"nodeType":"47","messageId":"48","endLine":57,"endColumn":27},{"ruleId":"45","severity":1,"message":"50","line":94,"column":11,"nodeType":"47","messageId":"48","endLine":94,"endColumn":20},{"ruleId":"39","replacedBy":"51"},{"ruleId":"41","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],["53"],["54"],"@typescript-eslint/no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'selectionStyle' is assigned a value but never used.","'nextLevel' is assigned a value but never used.",["53"],["54"],"no-global-assign","no-unsafe-negation"]